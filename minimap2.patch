diff --git a/Makefile b/Makefile
index 18622f5..86286e9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,7 @@
-CFLAGS=		-g -Wall -O2 -Wc++-compat #-Wextra
+CFLAGS=    -g -Wall -O2 -Wc++-compat -fPIC #-Wextra
 CPPFLAGS=	-DHAVE_KALLOC
 INCLUDES=
-OBJS=		kthread.o kalloc.o misc.o bseq.o sketch.o sdust.o options.o index.o chain.o align.o hit.o map.o format.o pe.o esterr.o splitidx.o ksw2_ll_sse.o
+OBJS=		kthread.o kalloc.o misc.o bseq.o sketch.o sdust.o options.o index.o chain.o align.o hit.o map.o format.o pe.o esterr.o splitidx.o ksw2_ll_sse.o cmappy.o
 PROG=		minimap2
 PROG_EXTRA=	sdust minimap2-lite
 LIBS=		-lm -lz -lpthread
@@ -126,3 +126,4 @@ pe.o: mmpriv.h minimap.h bseq.h kvec.h kalloc.h ksort.h
 sdust.o: kalloc.h kdq.h kvec.h ketopt.h sdust.h
 sketch.o: kvec.h kalloc.h mmpriv.h minimap.h bseq.h
 splitidx.o: mmpriv.h minimap.h bseq.h
+cmappy.o: cmappy.h
\ No newline at end of file
diff --git a/python/cmappy.h b/cmappy.c
similarity index 67%
rename from python/cmappy.h
rename to cmappy.c
index 6bc5635..5d65da5 100644
--- a/python/cmappy.h
+++ b/cmappy.c
@@ -1,26 +1,6 @@
-#ifndef CMAPPY_H
-#define CMAPPY_H
+#include "cmappy.h"
 
-#include <stdlib.h>
-#include <string.h>
-#include <zlib.h>
-#include "minimap.h"
-#include "kseq.h"
-KSEQ_DECLARE(gzFile)
-
-typedef struct {
-	const char *ctg;
-	int32_t ctg_start, ctg_end;
-	int32_t qry_start, qry_end;
-	int32_t blen, mlen, NM, ctg_len;
-	uint8_t mapq, is_primary;
-	int8_t strand, trans_strand;
-	int32_t seg_id;
-	int32_t n_cigar32;
-	uint32_t *cigar32;
-} mm_hitpy_t;
-
-static inline void mm_reg2hitpy(const mm_idx_t *mi, mm_reg1_t *r, mm_hitpy_t *h)
+void mm_reg2hitpy(const mm_idx_t *mi, mm_reg1_t *r, mm_hitpy_t *h)
 {
 	h->ctg = mi->seq[r->rid].name;
 	h->ctg_len = mi->seq[r->rid].len;
@@ -38,19 +18,19 @@ static inline void mm_reg2hitpy(const mm_idx_t *mi, mm_reg1_t *r, mm_hitpy_t *h)
 	h->cigar32 = r->p->cigar;
 }
 
-static inline void mm_free_reg1(mm_reg1_t *r)
+void mm_free_reg1(mm_reg1_t *r)
 {
 	free(r->p);
 }
 
-static inline kseq_t *mm_fastx_open(const char *fn)
+kseq_t *mm_fastx_open(const char *fn)
 {
 	gzFile fp;
 	fp = fn && strcmp(fn, "-") != 0? gzopen(fn, "r") : gzdopen(fileno(stdin), "r");
 	return kseq_init(fp);
 }
 
-static inline void mm_fastx_close(kseq_t *ks)
+void mm_fastx_close(kseq_t *ks)
 {
 	gzFile fp;
 	fp = ks->f->f;
@@ -58,24 +38,23 @@ static inline void mm_fastx_close(kseq_t *ks)
 	gzclose(fp);
 }
 
-static inline int mm_verbose_level(int v)
+int mm_verbose_level(int v)
 {
 	if (v >= 0) mm_verbose = v;
 	return mm_verbose;
 }
 
-static inline void mm_reset_timer(void)
+void mm_reset_timer(void)
 {
 	extern double realtime(void);
 	mm_realtime0 = realtime();
 }
 
-extern unsigned char seq_comp_table[256];
-static inline mm_reg1_t *mm_map_aux(const mm_idx_t *mi, const char *seq1, const char *seq2, int *n_regs, mm_tbuf_t *b, const mm_mapopt_t *opt)
+mm_reg1_t *mm_map_aux(const mm_idx_t *mi, const char *seq1, const char *seq2, int *n_regs, mm_tbuf_t *b, const mm_mapopt_t *opt)
 {
 	mm_reg1_t *r;
 
-	Py_BEGIN_ALLOW_THREADS
+	// Py_BEGIN_ALLOW_THREADS
 	if (seq2 == 0) {
 		r = mm_map(mi, strlen(seq1), seq1, n_regs, b, opt, NULL);
 	} else {
@@ -103,12 +82,12 @@ static inline mm_reg1_t *mm_map_aux(const mm_idx_t *mi, const char *seq1, const
 		free(regs[1]);
 		r = regs[0];
 	}
-	Py_END_ALLOW_THREADS
+	// Py_END_ALLOW_THREADS
 
 	return r;
 }
 
-static inline char *mappy_revcomp(int len, const uint8_t *seq)
+char *mappy_revcomp(int len, const uint8_t *seq)
 {
 	int i;
 	char *rev;
@@ -119,7 +98,7 @@ static inline char *mappy_revcomp(int len, const uint8_t *seq)
 	return rev;
 }
 
-static char *mappy_fetch_seq(const mm_idx_t *mi, const char *name, int st, int en, int *len)
+char *mappy_fetch_seq(const mm_idx_t *mi, const char *name, int st, int en, int *len)
 {
 	int i, rid;
 	char *s;
@@ -137,7 +116,7 @@ static char *mappy_fetch_seq(const mm_idx_t *mi, const char *name, int st, int e
 	return s;
 }
 
-static mm_idx_t *mappy_idx_seq(int w, int k, int is_hpc, int bucket_bits, const char *seq, int len)
+mm_idx_t *mappy_idx_seq(int w, int k, int is_hpc, int bucket_bits, const char *seq, int len)
 {
 	const char *fake_name = "N/A";
 	char *s;
@@ -148,5 +127,3 @@ static mm_idx_t *mappy_idx_seq(int w, int k, int is_hpc, int bucket_bits, const
 	free(s);
 	return mi;
 }
-
-#endif
diff --git a/cmappy.h b/cmappy.h
new file mode 100644
index 0000000..5fff8c3
--- /dev/null
+++ b/cmappy.h
@@ -0,0 +1,44 @@
+#ifndef CMAPPY_H
+#define CMAPPY_H
+
+#include <stdlib.h>
+#include <string.h>
+#include <zlib.h>
+#include "minimap.h"
+#include "kseq.h"
+KSEQ_DECLARE(gzFile)
+
+typedef struct {
+	const char *ctg;
+	int32_t ctg_start, ctg_end;
+	int32_t qry_start, qry_end;
+	int32_t blen, mlen, NM, ctg_len;
+	uint8_t mapq, is_primary;
+	int8_t strand, trans_strand;
+	int32_t seg_id;
+	int32_t n_cigar32;
+	uint32_t *cigar32;
+} mm_hitpy_t;
+
+void mm_reg2hitpy(const mm_idx_t *mi, mm_reg1_t *r, mm_hitpy_t *h);
+
+void mm_free_reg1(mm_reg1_t *r);
+
+kseq_t *mm_fastx_open(const char *fn);
+
+void mm_fastx_close(kseq_t *ks);
+
+int mm_verbose_level(int v);
+
+void mm_reset_timer(void);
+
+extern unsigned char seq_comp_table[256];
+mm_reg1_t *mm_map_aux(const mm_idx_t *mi, const char *seq1, const char *seq2, int *n_regs, mm_tbuf_t *b, const mm_mapopt_t *opt);
+
+char *mappy_revcomp(int len, const uint8_t *seq);
+
+char *mappy_fetch_seq(const mm_idx_t *mi, const char *name, int st, int en, int *len);
+
+mm_idx_t *mappy_idx_seq(int w, int k, int is_hpc, int bucket_bits, const char *seq, int len);
+
+#endif
diff --git a/options.c b/options.c
index d4eafaa..8581e87 100644
--- a/options.c
+++ b/options.c
@@ -73,7 +73,7 @@ void mm_mapopt_max_intron_len(mm_mapopt_t *opt, int max_intron_len)
 
 int mm_set_opt(const char *preset, mm_idxopt_t *io, mm_mapopt_t *mo)
 {
-	if (preset == 0) {
+   if (strcmp(preset, "default") == 0) {
 		mm_idxopt_init(io);
 		mm_mapopt_init(mo);
 	} else if (strcmp(preset, "ava-ont") == 0) {
